{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","dialogs","dialogsItems","active","messages","message","dialog","DialogItem","props","path","id","react_default","a","createElement","className","s","react_router_dom_dist","to","name","Message","src","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogsPage","dialogsElements","map","d","Dialogs_DialogItem_DialogItem","key","messagesElements","m","Dialogs_Message_Message","isAuth","values","sendMessage","newMessageBody","dist","compose","connect","dispatch","sendMessageCreator","withAuthRedirect"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,QAAA,yBAAAC,aAAA,8BAAAC,OAAA,wBAAAC,SAAA,0BAAAC,QAAA,yBAAAC,OAAA,+HCaHC,EAVI,SAACC,GAClB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAET,OAAS,IAAMS,IAAEZ,QACjCQ,EAAAC,EAAAC,cAACG,EAAA,EAAO,CAACC,GAAIR,GAAOD,EAAMU,QCGjBC,EATC,SAACX,GACf,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAET,QACfE,EAAMH,QACPM,EAAAC,EAAAC,cAAA,OAAKO,IAAI,4ICiCTC,EAAcC,YAAiB,IAoB/BC,EAAsBC,YAAU,CAAEC,KAAM,wBAAlBD,CAlBL,SAAChB,GACtB,OACEG,EAAAC,EAAAC,cAAA,QAAMa,SAAUlB,EAAMmB,cACpBhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACe,EAAA,EAAK,CACJC,UAAWC,IACXC,SAAU,CAACC,IAAUX,GACrBH,KAAK,iBACLe,YAAY,wBAGhBtB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BAUOqB,EAnDC,SAAC1B,GACf,IAAI2B,EAAQ3B,EAAM4B,YACdC,EAAkBF,EAAMlC,QAAQqC,IAAI,SAACC,GAAC,OACxC5B,EAAAC,EAAAC,cAAC2B,EAAU,CAACtB,KAAMqB,EAAErB,KAAMuB,IAAKF,EAAE7B,GAAIA,GAAI6B,EAAE7B,OAGzCgC,EAAmBP,EAAM/B,SAASkC,IAAI,SAACK,GAAC,OAC1ChC,EAAAC,EAAAC,cAAC+B,EAAO,CAACvC,QAASsC,EAAEtC,QAASoC,IAAKE,EAAEjC,OAOtC,OAAKF,EAAMqC,OAGTlC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEd,SAChBU,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEb,cAAemC,GACjC1B,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEX,UAChBO,EAAAC,EAAAC,cAAA,WAAM6B,IAER/B,EAAAC,EAAAC,cAACU,EAAmB,CAACG,SAZL,SAACoB,GACnBtC,EAAMuC,YAAYD,EAAOE,oBAGDrC,EAAAC,EAAAC,cAACoC,EAAA,EAAQ,CAAChC,GAAI,oCCc3BiC,sBACbC,YAdoB,SAAChB,GACrB,MAAO,CACLC,YAAaD,EAAMC,cAGE,SAACgB,GACxB,MAAO,CACLL,YAAa,SAACC,GACZI,EAASC,YAAmBL,QAOhCM,IAFaJ,CAGbhB","file":"static/js/2.6c0a5af6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3bRlH\",\"dialogsItems\":\"Dialogs_dialogsItems__1MtJq\",\"active\":\"Dialogs_active__oO2B7\",\"messages\":\"Dialogs_messages__cOaSK\",\"message\":\"Dialogs_message__QI60j\",\"dialog\":\"Dialogs_dialog__-EF7j\"};","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n  let path = \"/dialogs/\" + props.id;\r\n\r\n  return (\r\n    <div className={s.dialog + \" \" + s.active}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\n\r\nconst Message = (props) => {\r\n  return (\r\n    <div className={s.dialog}>\r\n      {props.message}\r\n      <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTfRd7uSJ4VzVCa2B8v5NoMEVEczsdTKgIL5w&usqp=CAU\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport { Navigate, NavLink } from \"react-router-dom\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {\r\n  sendMessageCreator,\r\n  updateNewMessageBodyCreator,\r\n} from \"../../redux/dialogs-reducer\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { Textarea } from \"./../Common/Preloader/FormsControl/FormsControls\";\r\nimport { maxLengthCreator, required } from \"../../utils/validators/validators\";\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.dialogsPage;\r\n  let dialogsElements = state.dialogs.map((d) => (\r\n    <DialogItem name={d.name} key={d.id} id={d.id} />\r\n  ));\r\n\r\n  let messagesElements = state.messages.map((m) => (\r\n    <Message message={m.message} key={m.id} />\r\n  ));\r\n\r\n  let addNewMessage = (values) => {\r\n    props.sendMessage(values.newMessageBody);\r\n  };\r\n\r\n  if (!props.isAuth) return <Navigate to={\"/login\"} />;\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogsElements}</div>\r\n      <div className={s.messages}>\r\n        <div>{messagesElements}</div>\r\n      </div>\r\n      <AddMessageFormRedux onSubmit={addNewMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          component={Textarea}\r\n          validate={[required, maxLength50]}\r\n          name=\"newMessageBody\"\r\n          placeholder=\"Enter your message\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Send</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddMessageFormRedux = reduxForm({ form: \"dialogAddMessageForm\" })(\r\n  AddMessageForm\r\n);\r\n\r\nexport default Dialogs;\r\n","import { sendMessageCreator } from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { withAuthRedirect } from \"./../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\n// const DialogsContainer = (props) => {\r\n//   let state = props.store.getState().dialogsPage;\r\n\r\n//   let onSendMessageClick = () => {\r\n//     props.store.dispatch(sendMessageCreator());\r\n//   };\r\n\r\n//   let onNewMessageChange = (body) => {\r\n//     props.store.dispatch(updateNewMessageBodyCreator(body));\r\n//   };\r\n\r\n//   return (\r\n//     <Dialogs\r\n//       updateNewMessageBody={onNewMessageChange}\r\n//       sendMessage={onSendMessageClick}\r\n//       dialogsPage={state}\r\n//     />\r\n//   );\r\n// };\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (newMessageBody) => {\r\n      dispatch(sendMessageCreator(newMessageBody));\r\n    },\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}